# ui_main.py
from __future__ import annotations

import os
import logging
from datetime import datetime
from typing import Optional

import pandas as pd

# QtCore
from PySide6.QtCore import (
    Qt, QTimer, Signal, Slot, QAbstractTableModel,
    QModelIndex, QSettings, QSortFilterProxyModel, QUrl
)

# QtWidgets
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QDialog, QMessageBox,
    QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QStatusBar,
    QTableView, QHeaderView, QLineEdit, QToolBar, QListWidget,
    QTextEdit, QListWidgetItem, QTextBrowser, QSplitter, QCheckBox,
    QComboBox,
)

from core.detail_information_getter import DetailInformationGetter, SimpleMarketAPI
from core.macd_calculator import macd_bus  # noqa: F401 (연결 보장용)
from core.macd_dialog import MacdDialog

# ✅ 설정/와이어링
from setting.settings_manager import SettingsStore, SettingsDialog
from setting.wiring import AppWiring

logger = logging.getLogger("ui_main")
logging.getLogger("matplotlib.font_manager").setLevel(logging.WARNING)


# ----------------------------
# DataFrame → Qt 모델
# ----------------------------
class DataFrameModel(QAbstractTableModel):
    def __init__(self, df: pd.DataFrame = pd.DataFrame(), parent=None):
        super().__init__(parent)
        self._df = df.copy()

    def setDataFrame(self, df: pd.DataFrame):
        self.beginResetModel()
        self._df = df.copy()
        self.endResetModel()

    def rowCount(self, parent: QModelIndex = QModelIndex()):
        return 0 if parent.isValid() else len(self._df)

    def columnCount(self, parent: QModelIndex = QModelIndex()):
        return 0 if parent.isValid() else len(self._df.columns)

    def data(self, index: QModelIndex, role=Qt.DisplayRole):
        if not index.isValid() or role not in (Qt.DisplayRole, Qt.EditRole, Qt.ToolTipRole):
            return None
        value = self._df.iat[index.row(), index.column()]
        return "" if pd.isna(value) else str(value)

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return None
        if orientation == Qt.Horizontal:
            try:
                return str(self._df.columns[section])
            except Exception:
                return ""
        return ""  # 세로 헤더 숨김


# ----------------------------
# 고도화 UI MainWindow
# ----------------------------
class MainWindow(QMainWindow):
    """
    main.py에서 넘겨주는 것들:
      - bridge: AsyncBridge 인스턴스
      - engine: Engine 인스턴스 (start_loop/initialize 등 보유)
      - perform_filtering_cb: callable -> 필터 실행 후 출력 경로(str) 반환 가능
      - project_root: str
      - wiring: AppWiring (선택)
    """

    # 비UI → UI 스레드 안전 전환용 시그널
    sig_new_stock_detail = Signal(dict)
    sig_trade_signal = Signal(dict)  # {"side","code","price","ts?"}

    def __init__(self, bridge, engine, perform_filtering_cb, project_root: str, wiring: AppWiring | None = None):
        super().__init__()
        self.setWindowTitle("조건검색 & MACD 모니터")
        self.resize(1180, 760)

        self.bridge = bridge
        self.engine = engine
        self.perform_filtering_cb = perform_filtering_cb
        self.project_root = project_root
        self.wiring = wiring  # ✅ 주입(선택)

        # ✅ 결과 테이블 컨테이너 (표 기반 렌더)
        self._result_rows = []     # [{"code","name","price","rt","vol","buy_price","sell_price","updated_at"}...]
        self._result_index = {}    # code -> index (upsert)

        # 다이얼로그/스트림 상태
        self._macd_dialogs: dict[str, QDialog] = {}
        self._active_macd_streams: set[str] = set()
        self._last_stream_req_ts: dict[str, pd.Timestamp] = {}
        self._stream_debounce_sec: int = 15

        # 상단 툴바 + 레이아웃
        self._build_toolbar()
        self._build_layout()

        # 상태바 + 시계
        self.status = QStatusBar()
        self.setStatusBar(self.status)
        self.status.showMessage("준비됨")
        self._start_clock()
        self.label_new_stock = QLabel("신규 종목 없음")
        self.status.addPermanentWidget(self.label_new_stock)

        # 시그널 연결
        self._connect_signals()

        # 스타일
        self._apply_stylesheet()

        # 초기 로딩
        if hasattr(self.engine, "start_loop"):
            self.engine.start_loop()
        self.load_candidates()

        # 상태 저장/복원 + 설정 로드/적용
        self._settings_qs = QSettings("Trade", "AutoTraderUI")
        state = self._settings_qs.value("hsplit_state")
        if state is not None:
            try:
                self.hsplit.restoreState(state)
            except Exception:
                pass

        # ✅ 앱 설정 로드 → Wiring에 적용 → UI 체크박스 동기화
        self.store = SettingsStore()
        self.app_cfg = self.store.load()
        if self.wiring:
            self.wiring.apply_settings(self.app_cfg)

        # UI 토글 초기화 (QSettings 호환 유지)
        auto_buy_saved = self._settings_qs.value("auto_buy")
        auto_sell_saved = self._settings_qs.value("auto_sell")
        self.cb_auto_buy.setChecked(bool(auto_buy_saved) if auto_buy_saved is not None else getattr(self.app_cfg, "auto_buy", False))
        self.cb_auto_sell.setChecked(bool(auto_sell_saved) if auto_sell_saved is not None else getattr(self.app_cfg, "auto_sell", False))

        # 옵션: 자동 오픈 off
        self.auto_open_macd_modal = False

    # ---- 토큰 갱신 수신 ----
    def _on_token_ready(self, token: str):
        try:
            if not hasattr(self, "getter") or self.getter is None:
                self.getter = DetailInformationGetter(token=token)
            else:
                self.getter.token = token

            if not hasattr(self, "market_api") or self.market_api is None:
                self.market_api = SimpleMarketAPI(token=token)
            else:
                self.market_api.set_token(token)
        except Exception:
            pass

    # ---- 신호 연결 ----
    def _connect_signals(self):
        # 버튼/액션
        self.btn_init.clicked.connect(self.on_click_init)
        self.btn_start.clicked.connect(self.on_click_start_condition)
        self.btn_stop.clicked.connect(self.on_click_stop_condition)
        self.btn_filter.clicked.connect(self.on_click_filter)
        self.btn_settings.triggered.connect(self.on_open_settings_dialog)  # ✅ 환경설정

        # 입력/목록
        self.search_candidates.textChanged.connect(self._filter_candidates)
        self.search_conditions.textChanged.connect(self._filter_conditions)
        self.list_conditions.itemSelectionChanged.connect(self._update_cond_info)

        # 브리지
        if hasattr(self.bridge, "log"):
            self.bridge.log.connect(self.append_log)
        if hasattr(self.bridge, "condition_list_received"):
            self.bridge.condition_list_received.connect(self.populate_conditions)
        if hasattr(self.bridge, "macd_series_ready"):
            try:
                self.bridge.macd_series_ready.connect(self.on_macd_series_ready, Qt.UniqueConnection)
            except TypeError:
                pass
        if hasattr(self.bridge, "macd_data_received"):
            try:
                self.bridge.macd_data_received.connect(self.on_macd_data, Qt.UniqueConnection)
            except TypeError:
                pass
        if hasattr(self.bridge, "new_stock_received"):
            self.bridge.new_stock_received.connect(self.on_new_stock)
        if hasattr(self.bridge, "token_ready"):
            self.bridge.token_ready.connect(self._on_token_ready)
        if hasattr(self.bridge, "new_stock_detail_received"):
            self.bridge.new_stock_detail_received.connect(self.on_new_stock_detail)

        # 비UI→UI 프록시
        self.sig_new_stock_detail.connect(self.on_new_stock_detail)
        self.sig_trade_signal.connect(self.on_trade_signal)

        # 엔진 초기화 완료
        if hasattr(self.engine, "initialization_complete"):
            self.engine.initialization_complete.connect(self.on_initialization_complete)

    # ---- 레이아웃 빌드 ----
    def _build_layout(self):
        central = QWidget()
        self.setCentralWidget(central)
        root_layout = QHBoxLayout(central)
        main_split = QSplitter(Qt.Horizontal)
        root_layout.addWidget(main_split)

        # 좌측 패널
        left_panel = QWidget(self)
        left = QVBoxLayout(left_panel)
        self.search_conditions = QLineEdit(placeholderText="조건식 검색…")
        self.btn_init = QPushButton("초기화 (토큰+WS 연결)")
        self.btn_start = QPushButton("선택 조건 시작")
        self.btn_stop = QPushButton("선택 조건 중지")
        self.btn_filter = QPushButton("종목 필터링 실행 (재무+기술)")
        self.list_conditions = QListWidget()
        self.lbl_cond_info = QLabel("0개 / 선택: 0")

        # ✅ 자동매수/매도 체크박스
        cb_row = QHBoxLayout()
        self.cb_auto_buy = QCheckBox("자동매수")
        self.cb_auto_sell = QCheckBox("자동매도")
        cb_row.addWidget(self.cb_auto_buy)
        cb_row.addWidget(self.cb_auto_sell)
        cb_row.addStretch(1)

        left.addWidget(self.search_conditions)
        left.addWidget(QLabel("조건식 목록"))
        left.addWidget(self.list_conditions, 1)
        left.addWidget(self.btn_init)
        left.addWidget(self.btn_filter)
        left.addLayout(cb_row)
        left.addWidget(self.lbl_cond_info)
        row_btns = QHBoxLayout()
        row_btns.addWidget(self.btn_start)
        row_btns.addWidget(self.btn_stop)
        left.addLayout(row_btns)
        main_split.addWidget(left_panel)

        # 우측 패널
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # 상단(좌/우) + 하단(로그)
        vsplit = QSplitter(Qt.Vertical)
        right_layout.addWidget(vsplit, 1)

        # 상단 좌/우
        hsplit = QSplitter(Qt.Horizontal)
        self.hsplit = hsplit
        vsplit.addWidget(hsplit)

        # 상단-좌: 후보 테이블
        pane_top_left = QWidget(self)
        top_left = QVBoxLayout(pane_top_left)
        top_left.addWidget(QLabel("25일이내 급등 종목"))
        self.search_candidates = QLineEdit(pane_top_left, placeholderText="후보 종목 실시간 검색…")
        top_left.addWidget(self.search_candidates)

        self.cand_table = QTableView(pane_top_left)
        self.cand_model = DataFrameModel(pd.DataFrame(columns=["회사명", "종목코드", "현재가"]))
        self.cand_proxy = QSortFilterProxyModel(self)
        self.cand_proxy.setSourceModel(self.cand_model)
        self.cand_proxy.setFilterCaseSensitivity(Qt.CaseInsensitive)
        self.cand_proxy.setFilterKeyColumn(-1)
        self.cand_table.setModel(self.cand_proxy)
        self.cand_table.setSortingEnabled(False)
        self.cand_table.horizontalHeader().setStretchLastSection(True)
        self.cand_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.cand_table.setSelectionBehavior(QTableView.SelectRows)
        self.cand_table.setAlternatingRowColors(True)
        self.cand_table.verticalHeader().setVisible(False)
        self.cand_table.setCornerButtonEnabled(False)
        top_left.addWidget(self.cand_table, 1)

        # 상단-우: 결과 표 영역
        pane_top_right = QWidget()
        top_right = QVBoxLayout(pane_top_right)
        top_right.addWidget(QLabel("종목 검색 결과"))

        # 정렬 UI
        sort_row = QHBoxLayout()
        self.cmb_sort_key = QComboBox()
        self.cmb_sort_key.addItems([
            "등락률(%)", "현재가", "거래량", "매수가", "매도가", "코드", "이름", "최근 갱신시간"
        ])
        self.cmb_sort_key.setCurrentText("최근 갱신시간")  # 갱신 최신순 보이기 좋게
        self.btn_sort_dir = QPushButton("내림차순")
        self.btn_sort_dir.setCheckable(True)  # 체크=내림차순
        self.btn_sort_dir.setChecked(True)
        sort_row.addWidget(QLabel("정렬:"))
        sort_row.addWidget(self.cmb_sort_key)
        sort_row.addWidget(self.btn_sort_dir)
        sort_row.addStretch(1)
        top_right.addLayout(sort_row)

        # 정렬 이벤트 연결
        self.cmb_sort_key.currentIndexChanged.connect(lambda _ : self._render_results_html())
        self.btn_sort_dir.toggled.connect(lambda checked: (
            self.btn_sort_dir.setText("내림차순" if checked else "오름차순"),
            self._render_results_html()
        ))

        self.text_result = QTextBrowser()
        self.text_result.setOpenExternalLinks(False)
        self.text_result.setOpenLinks(False)
        self.text_result.setReadOnly(True)
        self.text_result.anchorClicked.connect(self._on_result_anchor_clicked)
        top_right.addWidget(self.text_result, 1)

        # 좌/우 등록
        hsplit.addWidget(pane_top_left)
        hsplit.addWidget(pane_top_right)
        hsplit.setSizes([680, 440])

        # 하단: 로그
        pane_bottom = QWidget()
        bottom = QVBoxLayout(pane_bottom)
        bottom.addWidget(QLabel("로그"))
        self.text_log = QTextEdit()
        self.text_log.setReadOnly(True)
        bottom.addWidget(self.text_log, 1)
        vsplit.addWidget(pane_bottom)
        vsplit.setSizes([540, 220])

        main_split.addWidget(right_panel)
        main_split.setSizes([380, 800])

    # ---- 스타일 ----
    def _apply_stylesheet(self):
        self.setStyleSheet("""
            QMainWindow, QWidget { background: #1f2124; color: #E6E6E6; }
            QLabel { color: #E6E6E6; }
            QLineEdit, QTextEdit, QListWidget, QTableView {
                background: #2a2d31; color: #E6E6E6; border: 1px solid #3a3d42;
                selection-background-color: #3d4650; selection-color: #ffffff;
                alternate-background-color: #26292d;
            }
            QLineEdit:focus, QTextEdit:focus { border: 1px solid #4d5661; }
            QPushButton {
                background: #2f3237; border: 1px solid #454a50; padding: 6px 10px;
                border-radius: 6px;
            }
            QPushButton:hover { background: #353a40; }
            QPushButton:pressed { background: #2a2e33; }
            QPushButton:disabled { color: #8b8f94; border-color: #3a3d42; }
            QTableView { gridline-color: #3a3d42; }
            QTableView::item:selected { background: #3d4650; }
            QHeaderView::section {
                background: #26292d; color: #E6E6E6; border: 0px; padding: 6px;
                border-bottom: 1px solid #3a3d42;
            }
            QStatusBar { background: #1b1d20; color: #cfd3d8; }
            QSplitter::handle { background: #2a2d31; }
        """)

    # ---- 툴바 ----
    def _build_toolbar(self):
        tb = QToolBar("Main")
        tb.setMovable(False)
        self.addToolBar(Qt.TopToolBarArea, tb)

        act_init = tb.addAction("초기화")
        act_init.setShortcut("Ctrl+I")
        act_init.triggered.connect(self.on_click_init)

        tb.addSeparator()
        act_start = tb.addAction("조건 시작")
        act_start.setShortcut("Ctrl+S")
        act_start.triggered.connect(self.on_click_start_condition)

        act_stop = tb.addAction("조건 중지")
        act_stop.setShortcut("Ctrl+E")
        act_stop.triggered.connect(self.on_click_stop_condition)

        tb.addSeparator()
        act_filter = tb.addAction("필터 실행")
        act_filter.setShortcut("Ctrl+F")
        act_filter.triggered.connect(self.on_click_filter)

        act_refresh = tb.addAction("후보 새로고침")
        act_refresh.setShortcut("F5")
        act_refresh.triggered.connect(self.load_candidates)

        tb.addSeparator()
        self.btn_settings = tb.addAction("환경설정…")  # ✅ 설정 진입

    def _start_clock(self):
        self._clock = QLabel()
        self.status.addPermanentWidget(self._clock)
        t = QTimer(self)
        t.timeout.connect(lambda: self._clock.setText(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        t.start(1000)
        self._clock_timer = t

    # ---- 종료시 상태 저장 + 엔진 종료 ----
    def closeEvent(self, event):
        try:
            if hasattr(self, "hsplit"):
                try:
                    self._settings_qs.setValue("hsplit_state", self.hsplit.saveState())
                except Exception:
                    pass

            # QSettings 호환 저장(별도 SettingsStore.save도 아래서 수행)
            self._settings_qs.setValue("auto_buy", self.cb_auto_buy.isChecked())
            self._settings_qs.setValue("auto_sell", self.cb_auto_sell.isChecked())

            # 최신 cfg 반영 저장
            setattr(self.app_cfg, "auto_buy", self.cb_auto_buy.isChecked())
            setattr(self.app_cfg, "auto_sell", self.cb_auto_sell.isChecked())
            self.store.save(self.app_cfg)

            if hasattr(self.engine, "shutdown"):
                self.engine.shutdown()

            for code6 in list(self._active_macd_streams):
                if hasattr(self.engine, "stop_macd_stream"):
                    self.engine.stop_macd_stream(code6)
        finally:
            event.accept()

    # ========================================================
    # 🔒 외부(웹소켓/async/스레드)에서 안전하게 호출할 프록시
    # ========================================================
    def threadsafe_new_stock_detail(self, payload: dict):
        try:
            self.sig_new_stock_detail.emit(payload)
        except Exception as e:
            self.append_log(f"[UI] emit 실패: {e}")

    def threadsafe_trade_signal(self, payload: dict):
        """
        외부(트레이더 등)에서 호출: {"side":"BUY"|"SELL", "code":"166090", "price":41700, "ts": "...?"}
        """
        try:
            self.sig_trade_signal.emit(payload)
        except Exception as e:
            self.append_log(f"[UI] trade emit 실패: {e}")

    # -------- 버튼 핸들러 --------
    def on_click_init(self):
        try:
            if getattr(self.engine, "_initialized", False):
                QMessageBox.information(self, "안내", "이미 초기화되었습니다.")
                return
            self.engine.initialize()
            self.btn_init.setEnabled(False)
        except Exception as e:
            QMessageBox.critical(self, "초기화 실패", str(e))

    def on_initialization_complete(self):
        self.status.showMessage("초기화 완료: WebSocket 수신 시작", 3000)
        QMessageBox.information(self, "초기화", "초기화 완료: WebSocket 수신 시작")

    def on_click_start_condition(self):
        item = self.list_conditions.currentItem()
        if not item:
            QMessageBox.warning(self, "안내", "시작할 조건식을 선택하세요.")
            return
        seq = item.data(Qt.UserRole) or ""
        self.engine.send_condition_search_request(seq)
        self.status.showMessage(f"조건검색 시작 요청: {seq}", 3000)

    def on_click_stop_condition(self):
        item = self.list_conditions.currentItem()
        if not item:
            QMessageBox.warning(self, "안내", "중지할 조건식을 선택하세요.")
            return
        seq = item.data(Qt.UserRole) or ""
        self.engine.remove_condition_realtime(seq)
        self.status.showMessage(f"조건검색 중지 요청: {seq}", 3000)

    def on_click_filter(self):
        try:
            out_path = self.perform_filtering_cb()
            self.append_log("✅ 필터링 완료 (finance + technical)")
            self.load_candidates(out_path if isinstance(out_path, str) else None)
            self.status.showMessage("필터링 완료", 3000)
        except Exception as e:
            QMessageBox.critical(self, "오류", str(e))

    # -------- 환경설정 --------
    def on_open_settings_dialog(self):
        dlg = SettingsDialog(self, self.app_cfg)
        if dlg.exec() == QDialog.Accepted:
            new_cfg = dlg.get_settings()
            # UI 체크박스 동기화
            self.cb_auto_buy.setChecked(getattr(new_cfg, "auto_buy", False))
            self.cb_auto_sell.setChecked(getattr(new_cfg, "auto_sell", False))
            # 저장
            self.store.save(new_cfg)
            self.app_cfg = new_cfg
            # Wiring 적용
            if self.wiring:
                self.wiring.apply_settings(new_cfg)
            self.append_log("⚙️ 설정이 적용되었습니다.")

    # -------- 다이얼로그 열기 --------
    def _open_macd_dialog(self, code: str):
        code6 = str(code)[-6:].zfill(6)
        dlg = self._macd_dialogs.get(code6)
        if dlg and dlg.isVisible():
            dlg.raise_(); dlg.activateWindow(); return

        self._ensure_macd_stream(code6)

        dlg = MacdDialog(code=code6, parent=self)
        dlg.finished.connect(lambda _: self._macd_dialogs.pop(code6, None))
        dlg.show()
        self._macd_dialogs[code6] = dlg

    # -------- 브리지 → UI --------
    @Slot(str)
    def append_log(self, text: str):
        self.text_log.append(str(text))

    @Slot(list)
    def populate_conditions(self, conditions: list):
        self.list_conditions.clear()
        normalized = []
        for cond in (conditions or []):
            if isinstance(cond, dict):
                seq = str(cond.get("seq", "")).strip()
                name = str(cond.get("name", "(이름 없음)")).strip()
            elif isinstance(cond, (list, tuple)) and len(cond) >= 2:
                seq = str(cond[0]).strip()
                name = str(cond[1]).strip()
            else:
                continue
            if seq or name:
                normalized.append({"seq": seq, "name": name})

        for c in normalized:
            item = QListWidgetItem(f"[{c['seq']}] {c['name']}")
            item.setData(Qt.UserRole, c['seq'])
            self.list_conditions.addItem(item)

        self._update_cond_info()
        self.append_log(f"✅ 조건식 {len(normalized)}개 로드")

    @Slot(str)
    def on_new_stock(self, code: str):
        self.label_new_stock.setText(f"신규 종목: {code}")
        self.status.showMessage(f"신규 종목: {code}", 3000)

    @Slot(str, float, float, float)
    def on_macd_data(self, code: str, macd: float, signal: float, hist: float):
        code6 = str(code)[-6:].zfill(6)
        self.status.showMessage(f"[MACD] {code6} M:{macd:.2f} S:{signal:.2f} H:{hist:.2f}", 2500)
        logger.info(f"[MACD] {code6} | MACD:{macd:.2f} Signal:{signal:.2f} Hist:{hist:.2f}")

    @Slot(dict)
    def on_macd_series_ready(self, data: dict):
        code = data.get("code")
        tf = (data.get("tf") or "").lower()
        series = data.get("series") or data.get("values")
        if not code or not tf or not series:
            return
        code6 = str(code)[-6:].zfill(6)
        logger.info("[ui_main] on_macd_series_ready: %s", code6)

    # ---- 변환/도우미 ----
    def _ensure_macd_stream(self, code6: str):
        try:
            now = pd.Timestamp.now(tz="Asia/Seoul")
            last = self._last_stream_req_ts.get(code6)
            if last is not None and (now - last).total_seconds() < getattr(self, "_stream_debounce_sec", 15):
                logger.debug("debounce: skip start_macd_stream for %s", code6)
                return
            self._last_stream_req_ts[code6] = now

            if code6 in self._active_macd_streams:
                logger.debug("start_macd_stream: already active for %s", code6)
                return

            if hasattr(self.engine, "start_macd_stream"):
                self.engine.start_macd_stream(code6)
                self._active_macd_streams.add(code6)
                logger.info("✅ started MACD stream for %s (UI ensure)", code6)
            else:
                logger.warning("engine has no start_macd_stream")
        except Exception as e:
            logger.warning("start_macd_stream failed for %s: %s", code6, e)

    def _fmt_num(self, v, digits=0):
        try:
            if v is None or v == "":
                return "-"
            f = float(str(v).replace(",", "").replace("%", ""))
            if digits:
                return f"{f:,.{digits}f}"
            return f"{int(round(f)):,.0f}"
        except Exception:
            return str(v)

    def _fmt_time(self, ts):
        try:
            if isinstance(ts, pd.Timestamp):
                if ts.tzinfo is None:
                    ts = ts.tz_localize("Asia/Seoul")
                return ts.strftime("%H:%M:%S")
            return pd.Timestamp(ts).tz_localize("Asia/Seoul").strftime("%H:%M:%S")
        except Exception:
            return "-"

    # -------- 결과표 렌더링 --------
    def _render_results_html(self):
        if not self._result_rows:
            self.text_result.setHtml("<div style='color:#9aa0a6;'>표시할 결과가 없습니다.</div>")
            return

        key_map = {
            "등락률(%)": "rt",
            "현재가": "price",
            "거래량": "vol",
            "매수가": "buy_price",
            "매도가": "sell_price",
            "코드": "code",
            "이름": "name",
            "최근 갱신시간": "updated_at",
        }
        sort_label = self.cmb_sort_key.currentText() if hasattr(self, "cmb_sort_key") else "최근 갱신시간"
        key = key_map.get(sort_label, "updated_at")
        desc = self.btn_sort_dir.isChecked() if hasattr(self, "btn_sort_dir") else True

        def sort_key(row):
            v = row.get(key)
            if key == "updated_at":
                try:
                    ts = v if isinstance(v, pd.Timestamp) else pd.Timestamp(v)
                    if ts.tzinfo is None:
                        ts = ts.tz_localize("Asia/Seoul")
                    return ts.timestamp()
                except Exception:
                    return 0
            try:
                return float(str(v).replace("%", "").replace(",", ""))
            except Exception:
                return str(v)

        rows = sorted(self._result_rows, key=sort_key, reverse=desc)

        html = [
            """
            <style>
              table.res { width:100%; border-collapse:collapse; font-size:12px; }
              table.res th, table.res td { border-bottom:1px solid #2f3338; padding:8px 10px; }
              table.res th { text-align:center; color:#cfd3d8; background:#25282d; position:sticky; top:0; }
              table.res td.right { text-align:right; font-family:Consolas,'Courier New',monospace; }
              table.res tr:hover { background:#2a2e33; }
              .pos { color:#e53935; font-weight:700; }
              .neg { color:#43a047; font-weight:700; }
              .muted { color:#9aa0a6; }
              .code { color:#9aa0a6; font-family:Consolas,'Courier New',monospace; }
              .btn { padding:2px 8px; border:1px solid #4c566a; border-radius:10px; color:#e0e0e0; text-decoration:none; background:#2b2f36; }
            </style>
            <table class="res">
              <thead>
                <tr>
                  <th style="width:24%;">이름</th>
                  <th style="width:12%;">코드</th>
                  <th style="width:12%;">현재가</th>
                  <th style="width:11%;">등락률</th>
                  <th style="width:11%;">매수가</th>
                  <th style="width:11%;">매도가</th>
                  <th style="width:11%;">최근 갱신</th>
                  <th style="width:8%;"></th>
                </tr>
              </thead>
              <tbody>
            """
        ]

        for r in rows:
            name  = r.get("name","-")
            code6 = r.get("code","-")
            price = self._fmt_num(r.get("price"))
            rtval = r.get("rt", 0.0)
            try:
                f_rt = float(str(rtval).replace("%", "").replace(",", ""))
            except Exception:
                f_rt = 0.0
            cls = "pos" if f_rt > 0 else ("neg" if f_rt < 0 else "muted")
            rtf = f"{f_rt:.2f}%"

            buy_price  = self._fmt_num(r.get("buy_price"))
            sell_price = self._fmt_num(r.get("sell_price"))
            upd  = self._fmt_time(r.get("updated_at"))

            html.append(
                f"""
                <tr>
                  <td>{name}</td>
                  <td class="code">{code6}</td>
                  <td class="right">{price}</td>
                  <td class="right {cls}">{rtf}</td>
                  <td class="right">{buy_price}</td>
                  <td class="right">{sell_price}</td>
                  <td class="right">{upd}</td>
                  <td><a href="macd:{code6}" class="btn">상세</a></td>
                </tr>
                """
            )

        html.append("</tbody></table>")
        self.text_result.setHtml("".join(html))

    # ---- 신규 종목 상세 수신 ----
    @Slot(dict)
    def on_new_stock_detail(self, payload: dict):
        row0 = None
        if isinstance(payload.get("open_pric_pre_flu_rt"), list) and payload["open_pric_pre_flu_rt"]:
            row0 = payload["open_pric_pre_flu_rt"][0]
        elif isinstance(payload.get("rows"), list) and payload["rows"]:
            row0 = payload["rows"][0]

        flat = dict(payload)
        if isinstance(row0, dict):
            for k, v in row0.items():
                flat.setdefault(k, v)

        code = (flat.get("stock_code") or "").strip()
        name = flat.get("stock_name") or flat.get("stk_nm") or flat.get("isu_nm") or "종목명 없음"

        def _num(keys):
            for k in keys:
                v = flat.get(k)
                if v not in (None, "", "-"):
                    try:
                        return float(str(v).replace(",", "").replace("%",""))
                    except Exception:
                        pass
            return None

        price = _num(["cur_prc","stck_prpr","price"])
        rt    = _num(["flu_rt","prdy_ctrt"])
        vol   = _num(["now_trde_qty","acml_vol","trqu"])

        code6 = str(code)[-6:].zfill(6) if code else ""
        if not code6:
            return

        updated_at = pd.Timestamp.now(tz="Asia/Seoul")

        row = {
            "code": code6,
            "name": name or "-",
            "price": price,
            "rt": rt if rt is not None else 0.0,
            "vol": vol,
            "buy_price": None,         # 신규 컬럼
            "sell_price": None,        # 신규 컬럼
            "updated_at": updated_at,
        }

        idx = self._result_index.get(code6)
        if idx is None:
            self._result_index[code6] = len(self._result_rows)
            self._result_rows.append(row)
        else:
            # 새 데이터로 덮되, 기존 buy/sell 이력은 보존
            keep_buy = self._result_rows[idx].get("buy_price")
            keep_sell = self._result_rows[idx].get("sell_price")
            if keep_buy is not None:
                row["buy_price"] = keep_buy
            if keep_sell is not None:
                row["sell_price"] = keep_sell
            self._result_rows[idx] = row

        self.label_new_stock.setText(f"신규 종목: {code6}")

        self._render_results_html()
        self._ensure_macd_stream(code6)

    # ---- 매수/매도 신호 수신 → 표 갱신 ----
    @Slot(dict)
    def on_trade_signal(self, payload: dict):
        """
        {"side":"BUY"|"SELL", "code":"166090", "price": 41700, "ts": ...}
        """
        try:
            side = str(payload.get("side", "")).upper()
            code6 = str(payload.get("code", "")).zfill(6)[-6:]
            price = payload.get("price")

            if not code6 or price in (None, ""):
                return

            idx = self._result_index.get(code6)
            if idx is None:
                # 테이블에 아직 없는 종목이면 행을 신규 생성
                row = {
                    "code": code6,
                    "name": code6,
                    "price": None,
                    "rt": 0.0,
                    "vol": None,
                    "buy_price": None,
                    "sell_price": None,
                    "updated_at": pd.Timestamp.now(tz="Asia/Seoul"),
                }
                self._result_index[code6] = len(self._result_rows)
                self._result_rows.append(row)
                idx = self._result_index[code6]

            row = self._result_rows[idx]
            if side == "BUY":
                row["buy_price"] = float(price)
            elif side == "SELL":
                row["sell_price"] = float(price)

            row["updated_at"] = pd.Timestamp.now(tz="Asia/Seoul")
            self._render_results_html()
        except Exception as e:
            self.append_log(f"[UI] on_trade_signal 오류: {e}")

    # -------- 링크 클릭(상세) 핸들러 --------
    @Slot(QUrl)
    def _on_result_anchor_clicked(self, url: QUrl):
        try:
            if not url or url.scheme() != 'macd':
                return
            code = url.path().lstrip('/') or url.host() or url.toString()[5:]
            if code:
                self._open_macd_dialog(code)
        except Exception as e:
            logger.error(f"anchor click error: {e}")

    # -------- 후보 로딩/검색 --------
    def load_candidates(self, path: str = None):
        if path is None:
            path = os.path.join(self.project_root, "candidate_stocks.csv")

        if not os.path.exists(path):
            self.append_log(f"ℹ️ 후보 종목 파일 없음: {path}")
            self.cand_model.setDataFrame(pd.DataFrame(columns=["회사명", "종목코드", "현재가"]))
            return

        try:
            df = pd.read_csv(path, encoding="utf-8-sig")
            rename_map = {}
            for col in list(df.columns):
                low = col.lower()
                if low in {"stock_name", "name", "종목명", "kor_name"}:
                    rename_map[col] = "회사명"
                elif low in {"stock_code", "code", "종목코드", "ticker"}:
                    rename_map[col] = "종목코드"
                elif low in {"price", "현재가", "close", "prc"}:
                    rename_map[col] = "현재가"
            if rename_map:
                df = df.rename(columns=rename_map)
            for need in ["회사명", "종목코드", "현재가"]:
                if need not in df.columns:
                    df[need] = ""

            df = df[["회사명", "종목코드", "현재가"]]
            self.cand_model.setDataFrame(df)
            self._filter_candidates(self.search_candidates.text())
            self.status.showMessage(f"후보 종목 {len(df)}건 로드", 3000)
        except Exception as e:
            self.append_log(f"❌ 후보 종목 파일 로드 오류: {e}")

    def _filter_conditions(self, text: str):
        text = (text or "").strip().lower()
        for i in range(self.list_conditions.count()):
            item = self.list_conditions.item(i)
            visible = (text in item.text().lower()) if text else True
            item.setHidden(not visible)
        self._update_cond_info()

    def _filter_candidates(self, text: str):
        self.cand_proxy.setFilterFixedString(text or "")

    def _update_cond_info(self):
        total = self.list_conditions.count()
        selected = len(self.list_conditions.selectedItems())
        self.lbl_cond_info.setText(f"{total}개 / 선택: {selected}")
